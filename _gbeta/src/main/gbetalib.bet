(* FILE "./main/gbetalib.bet"
 *
 * Copyright (C) 1997-2011 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.au.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aarhus
 *    DK-8200 Aarhus N
 *    Denmark
 *)

ORIGIN '../basicinterp';
INCLUDE '~beta/containers/seqContainers';
INCLUDE '../private/basicinterplib';
INCLUDE '../colorDefs';
BODY 'gbetalibbody'

-- AstNodeLib:attributes --

getNode:
  (# index: @integer;
     l2ast: ^l2AstNode
  enter index
  <<SLOT GbetaLibAstNodeGetNode:dopart>>
  exit l2ast[]
  #)

-- InterpreterBaseLib:attributes --

enableWarnings: (# <<SLOT GbetaEnableWarnings:dopart>> #);

setupNoColors: (# <<SLOT GbetaSetupNoColors:dopart>> #);
setupANSIColors: (# <<SLOT GbetaSetupANSIColors:dopart>> #);
setupMonoColors: (# <<SLOT GbetaSetupMonoColors:dopart>> #);

nodeVis: attributeVisualizer
  (# init::(# enter focus[] #);
     description::(# <<SLOT GbetaLibNodeVisDescription:dopart>> #);
     focus: ^UsageAsts
  <<SLOT GbetaLibNodeVis:dopart>>
  #);

nameAplVis: attributeVisualizer
  (# init::(# enter l2napl[] #);
     description::(# <<SLOT GbetaLibNameAplVisDescription:dopart>> #);
     l2napl: ^l2NameApl
  <<SLOT GbetaLibNameAplVis:dopart>>
  #);

derefVis: attributeVisualizer
  (# l2napl: ^l2NameApl;
     description::(# <<SLOT GbetaLibDerefVisDescription:dopart>> #)
  <<SLOT GbetaLibDerefVis:dopart>>
  #);

nestingVisualizer: attributeVisualizer
  (# stk: @stack(# element::text #);
     init::< (# <<SLOT GbetaLibNestingVisualizerInit:dopart>> #);
     where:< booleanValue(# l2ast: ^l2AstNode; enter l2ast[] do INNER #);
     chooseColor:<
       (# l2ast: ^l2AstNode;
          value: ^text
       enter l2ast[]
       do INNER
       exit value[]
       #);
     t: ^text
  <<SLOT GbetaLibNestingVisualizer:dopart>>
  #);

typeKindVis: nestingVisualizer
  (# description::(# <<SLOT GbetaLibTypeKindVisDescription:dopart>> #);
     where::(# do ( l2ast##<=l2AttributeDenotation## ) -> value #);
     chooseColor::
       (# l2aden: ^l2AttributeDenotation;
          stype: ^staticType
       <<SLOT GbetaLibTypeKindVis:dopart>>
       #)
  #);

mayGrowVis: nestingVisualizer
  (# description::(# <<SLOT GbetaLibMayGrowVisDescription:dopart>> #);
     where::(# do ( l2ast##<=l2NameApl## )->value #);
     chooseColor::
       (# l2napl: ^l2NameApl
       <<SLOT GbetaLibMayGrowVis:dopart>>
       #)
  #);

sptypeVisualizer: nestingVisualizer
  (# description::(# <<SLOT GbetaLibSPTypeVisDescription:dopart>> #);
     init::(# enter (focus[],sptype[]) #);
     where::(# <<SLOT GbetaLibSPTypeVisWhere:dopart>> #);
     focus: ^l2AstNode;
     sptype: ^staticPatternType;
     assoc: @boolean;
     chooseColor::(# <<SLOT GbetaLibSPTypeVisChoose:dopart>> #)
  #);

getStaticSubstanceVisualizer:
  (# stsub: ^staticSubstance;
     attrvis: ^substanceVisualizer
  enter stsub[]
  <<SLOT GbetaLibGetStaticSubstanceVisualizer:dopart>>
  exit attrvis[]
  #);

substanceVisualizer: attributeVisualizer(# do INNER #);

staticSingleSliceContextVisualizer: substanceVisualizer
  (# init::(# enter stssc[] #);
     description::(# <<SLOT GbetaLibSSSCVisDescription:dopart>> #);
     stssc: ^staticSingleSliceContext
  <<SLOT GbetaLibStaticSingleSliceContextVisualizer:dopart>>
  #);

staticOCPVisualizer: substanceVisualizer
  (# init::(# enter stocp[] #);
     description::(# <<SLOT GbetaLibStaticOCPVisDescription:dopart>> #);
     stocp: ^staticOCP;
     assoc: @boolean
  <<SLOT GbetaLibStaticOCPVisualizer:dopart>>
  #)

(*
 * local variables:
 * ee-beta-main-file: "/src/main/gbeta.bet"
 * end:
 *)
