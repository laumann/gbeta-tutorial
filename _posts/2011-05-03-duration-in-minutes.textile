---
layout: post
title: Duration In Minutes
---

h1. {{ page.title }}

In a "previous post":/2011/04/25/missing-features.html I described how the modelling of a song in "The Pragmatic Programmer":http://www.ruby-doc.org/docs/ProgrammingRuby/ (in the section _Classes, Objects, and Variables_) could be done in gbeta. But I didn't finish. Because they have a section called _Virtual Attributes_, in which they create a method @durationInMinutes@, which either delivers the duration in minutes  (a floating point number), or sets it.

The funky thing about this is that internally there is no field called @durationInMinutes@ -- it's calculated on the fly. Internally in @Song@ there is only a @duration@ attribute (seconds as an @int@).

I was pondering how to do the same in gbeta. A first attempt might go like this:

bc(block). durationInMinutes: %(value:float|(duration/60.0)) {
  value*60|duration
}

Since we cannot have @durationInMinutes@ defined twice, we will have to create a single pattern that handles both. Clearly, the exit value should be @duration/60.0@. But something goes amiss, because running:

bc(block). aSong.durationInMinutes|putfloat;      // 4.3333333333333 (= 260 in seconds)
4.2|aSong.durationInMinutes;           // no problem
aSong.durationInMinutes|putfloat;      // 0 - wait, what?

The problem is that the line @value*60|duration@ will _always_ be executed (its chief characteristic). What then happens is, when we don't supply anything to the enter-part, the default value for @value@ is used, namely zero. What can we do to fix it then?

Well, we cannot have anything executed in the do-part of @durationInMinutes@, but fortunately we have to remember that enter- and exit-parts are @evalutaions@, and we can write (almost) any arbitrary expression inside them. How about just putting all the value setting logic inside the enter-part? It could look like this:

bc(block). durationInMinutes: %( %(value:float){ value*60|duration } | (duration/60.0) );

Well, for one thing, it becomes hard to read. Let's splice it out a bit:

bc(block). durationInMinutes: %(
  %(value:float) { value*60|duration } // enter
|
  duration/60.0                        // exit
);

The enter-part of @durationInMinutes@ has become advanced and enhanced with its own (anonymous) MainPart. This anynomous monster, receives a @float@ and sets the value of duration. The trick is that all that code is only executed when the enter-part of @durationInMinutes@ is called, i.e. when it is assigned to. This gives the expected behaviour:

bc(block).. ('Bicyclops', 'Fleck', 260) | aSong.init;

aSong.durationInMinutes | putfloat;        // 4.3333333333333
4.2 | aSong.durationInMinutes;
aSong.duration | putint;                   // 252

p. The idea and motivation for this example is to show how we can model attributes that don't exist, by hiding the difference between instance variables and calculated values. This is also called Betrand Meyer's _Uniform Access Principle_.

h2. Source code

The source code for the song and karaoke song example, I've included here for you perusal:

* @song.gb@ ("src":/tutorial/gbsrc/song.gb)
  The main file, to run the example, run @gbeta song.gb@
* @laumann.gb@ ("src":/tutorial/gbsrc/laumann.gb)
  My own library of functions, this needs to be placed next to @song.gb@, OR you can modify the @ORIGIN@ statement to the relative path to @laumann.gb@. This file contains (among other things) the declarations of the patterns @putint@ and @putfloat@.

Of course you need a working gbeta installation of version >= 1.9.8
