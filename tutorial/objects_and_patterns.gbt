---
layout: gbeta
title: Objects and Patterns
---

h1. Objects & Patterns

The most fundamental elements in BETA (and hence gbeta) are _objects_,
so this is where we will start.

Object-oriented programming busies itself with modelling things, and
we intend to introduce some of the main concepts of gbeta in this
fashion.

Say we want to model a bank account. To describe an object
representing a bank account we could start out like this:

bc(block). Account: {
  balance:  int;
  Deposit:  ...;
  Withdraw: ...;
}

from which we want to read that: _"An account has a balance and the
possibility of performing deposit and withdrawal actions."_

If we only ever to represent a single bank account, we could declare
the account as an object: <code>Account: @ { ... }</code>. However,
hopefully being in need of more than one account, we want to describe
the general structure of _an_ account, not just a singular one.

@Account@ is declared as a _pattern_, which means it is not _a_ bank
account, but a description of _what a bank account object looks
like_. We are going to represent our real bank accounts by objects, but
these objects will be derived from this pattern. It is the recipe from
which we are going to make actual bank account objects. To quote the
BETA book: "The objects representing the real bank accounts may then
be described as instances of this pattern."

Think about this for a minute.

Now that we have a model for our bank accounts, we can declare _object
instances_ like

bc(block). ac1, ac2: @Account;

and these will be the actual representation of our bank
accounts. Let's fill out the @Account@ pattern and see it in action:

gbprog. account1.gb

@Deposit@ and @Withdraw@ are also patterns. They represent the
concepts of depositing and withdrawing from the account,
respectively. Here is a technical phrase: _Executing_ an _object
instance_ of @Deposit@ represents an actual deposit action. I'll
rephrase this. To perform a deposit we generate an object from the
@Deposit@ _pattern_, then execute it.

To "execute an object" is something most programmers have to get used
to when dealing with gbeta. Objects are usually pretty action-less,
unless you invoke certain methods on them. But even then, it is not
the object executing, but a method residing within the
object. Executing an object is also sometimes called "evaluating" the
object.

p(note). Note: The above program is pretty boring, but it actually
runs in gbeta, it just doesn't give any output.

h2. The @MainPart@

Take another look at @Account@, @Deposit@ and @Withdraw@. They are not
completely similar, although they all possess something enclosed in
braces. But the last two patterns have something more.

When we were
hired to program the next big banking system someone demanded that
"deposit and withdraw are actions that take an 
integer value and then give us the new value of the balance". The part
that reads @amount:int@ declares exactly that _"I want an integer
(which I'm by the way going to call 'amount')"_. The part after the pipe:
@balance@ declares that _"... and I'm going to give you the value of
balance in return"_.

The three patterns in the banking example are in gbeta called a
*MainPart*. To be honest, I think it's an ugly name for a construct,
but the term 'pattern' is reserved for grander things--all MainParts are
patterns, but not all patterns are MainParts. So be it.

A MainPart in gbeta syntactically looks like this:

bc(block). %( <Enter> | <Exit> ) {
  <Attributes>
#
  <Statements>
}

The MainPart is an abstraction over the standard programming concepts
of classes and methods; a MainPart can be used for both. The different
parts outlined above are all optional which means that patterns can be
very sparse, but also very rich constructs when all parts are in
use. Let's walk through the parts in turn.

The @<Enter>@ part specifies what can be _given_ to the
MainPart, in other words, what the MainPart expects to have to
supplied. This corresponds to method arguments in other programming
languages. It can be a comma-separated list of arguments.

The @<Exit>@ part specifies what the MainPart, when evaluated, _returns_ to
the caller. For instance, an integer, when evaluated, returns its
value.

The pipe symbol @|@ is used to separate the enter part from the exit
part. If the exit part is empty the pipe can be omitted. (We saw the
pipe used in assignments earlier, so don't get confused--here the pipe
separates the enter from the exit part.)

The @<Attributes>@ section is where variables are declared for use
inside the MainPart.

Lastly, the @<Statements>@ section specifies what the pattern _does_
when it is evaluated. When thinking the execution order of a pattern,
one should remember: enter, do, exit. The pattern receives, works,
then delivers. The attributes are what the pattern needs for working.

The hash symbol @#@ is used to separate the attributes from the
statements section, and if only one of them is present (either
attributes or statements), the hash can be omitted.

Lastly, the percentage symbol @%@ is called a _public marker_. This
has something to do with how accesible things are inside a
pattern. For now it is enough to remember that whenever the enter
and/or exit parts are present, the percentage sign must be
present. Otherwise it is optional (in the beginning it might be safest
to always insert the percentage sign).

Returning to the @Account@ example, the deposit and withdraw patterns
utilise the enter, do and exit parts, but not the attributes. But,
looking at Account as a MainPart, it consists _only_ of attributes
(balance, Deposit and Withdraw).

We could also have written Deposit like this:

bc(block). Deposit: %(amount|balance) {
  amount: int
#
  balance+amount | balance
};

and Withdraw:

bc(block). Withdraw: %(amount|balance) { amount: int # balance-amount|balance }

p(note). The two declarations are the same except for the @+/-@
signs. gbeta doesn't think too much about whitespace, so you're free
to indent your code as you please. Just, for you own sake, keep it
readable.

h2. A slight digression: Implicit return.

Here's a little feature you might like to exploit. Consider defining a
pattern with a @to_s@ method, such as:

bc(block). Account {
  to_s: %(|s:string) { 'Balance: ' + (balance|int2str)|s }
}

All it does is put a value into @s@. And @to_s@ only has one return
value, namely a string. gbeta has a way of short-cutting this:
implicit return. It means you can write @to_s@ like this:

bc(block). to_s: %(|:string) { 'Balance: ' + (balance|int2str) |}

You see what happened? @s@ disappeared, and now the end of the @to_s@
block reads @|}@ (for the parser to accept this, there can be no space
between @|@ and @}@). Declaring @to_s@ this way, has the effect of
declaring a name to be returned: @return@; you may refer to @return in
the block. I could have written the block this way:

bc(block). to_s: %(|:string) {
  'Balance: ' |return;
  return + (balance|int2str)
|}

As long as the _last_ statement of the block delivers a value, that
value will be put into @return@ (and returned). Use it or not. gbeta
is an experimenting language and this indeed is experimentation.

h2. Objects and MainParts

The aim of this section has been to introduce the concept of a
MainPart on a somewhat theoretical level. But to actually realise the
versatility of the MainPart concept, one has to try them out. This is
what we are going to do now.

The following program aims to demonstrate how the MainPart relate to
objects and how objects are evaluated (i.e. executed). Take a few
minutes to go through the output of this program. It may look
daunting, but once you get through, your understanding of objects,
patterns and MainParts will be much richer.

gbprog. mainparts.gb

There are a couple of lessons to learn from this example. Firstly,
notice how everything is enclosed in braces and our declarations are
separated from our statements by @#@? It's no coincidence. A gbeta
program is at the top-level just a MainPart without enter and exit
parts.

Secondly, hopefully at this stage the intention of the Echo pattern is
clear: echo the given string; but you might ask, why bother declare
the static object @e@ if using Echo directly gives me the same result?
Well, it does... almost. @e@ keep the state it has, and upon
evaluating the object (@e;@), the text @hello@ is printed again. When
Echo is evaluated in the same manner, an empty line is produced. This
is because _every_ time we evaluate the Echo pattern directly, a new
instance is created for us by gbeta. Hence, in the above example only
one instance of @e@ exists, but we have four distinct object instances
of Echo in the lines refering directly to the Echo pattern. These
instances are _anonymous_.

The same is true in the lines using @s@ and the @TalkingString@
pattern. The TalkingString has the extra feat of being able to exit
the value of its given string. This is especially shown in the line:

bc(block). 'foo' | s | stdio;

which reads _"Send the text 'foo' to s, then take whatever s delivers
and send it on to stdio"_. Pipes may be arbitrarily combined like
this as long as the exit-list for the entity on the left-hand side
matches the enter-list of the entity on the right-hand side. This will
be explained in more detail later, in our example all of our patterns
receive a string (the only thing they receive) and either exit the
same string (TalkingString) or don't exit anything (Echo). This is
exactly why the last line will not work, because @stdio@ expects a
single string, but @e@ (an instance of Echo) doesn't exit anything.

The interesting thing about this line is how we use all three parts
(enter, do and exit) whereas in the lines before we either only used
the enter and do part or the exit and do part. But notice how we
_always_ have the do-part executed--this is _at least_ what should
happen when evaluating an object.

As before, when using the TalkingString directly, a new anonymous
instance is generated and executed every time.

Bonus: Consider the @newline@ pattern:

bc(block). newline: { '\n'|stdio };

which allows me to write @newline;@ directly in the code and hey,
presto, a newline is produced. Below is the Java version of the same
function. 

bc(block). public [static] void newline() { System.out.print("\n"); }

which is then invoked with @newline();@ (the static keyword is
optional) -- in my opinion I would prefer the gbeta way. (Plus you get
killed in Java world for writing a method in a single line.)

h2. How MainParts are both classes _and_ methods

I said earlier that MainParts can act as both classes and
methods. This will be argued now.

To see how a MainPart can be used as a class, consider a MainPart with
just attributes. When this MainPart is evaluated, nothing will happen
(because its do-part is empty), its enter and exit parts are empty and
so it doesn't receive or deliver anything. It is, by all demands, a
class, a container for other things, and we have at this point already
seen one such MainPart: the @Account@. It only has attributes, namely
@balance@, @Deposit@ and @Withdraw@.

Now consider the MainPart as a method. The idea of a method (or
function) is to "invoke" it with a list of arguments and accept any
return values it may have. A method is short-lived and after it has
finished executing it shouldn't remember its state. This is exactly
what the MainParts @Deposit@, @Withdraw@, @TalkingString@ and @Echo@
do.

h2. Dynamic Object References, @new@ and @null@

Now we'll go back to look at MainParts along with dynamic
declarations. Remember how dynamic object references were declared
with @^@? The following example program shows how the @TalkingString@
can be used in a dynamic declaration.

gbprog. dyn_objects.gb

First of all, before we can even begin to work with @sRef@ we have to
_initialise_ it to something. If we just started putting strings into
it, we would get a run-time error telling us that @sRef@ is
@null@. This is a special value in gbeta--and indeed, many other
languages--which tells us that the name @sRef@ points to _nothing_
whatsoever. Therefore the line:

bc(block). new TalkingString^|sRef;

means that we want a new object instance of @TalkingString@ and the 'hat',
@^@, after the name, tells gbeta that we would like the _reference_
(also some places called a _pointer_) to put into @sRef@. We could
also have written the same line as:

bc(block). new sRef;    // go ahead, try!

which has the same effect. The following line:

bc(block). 'hello'|sRef@

looks _almost_ like the other @'hello'|...@ assignments we've seen
earlier--except for the <code>@</code>-sign. In this case we cannot do
without the at-sign, because @sRef@ is declared as a reference, but we
really want to work with the object that it refers to. Therefore, we
use <code>@</code> to _dereference_ @sRef@ and have it give us the
object it points to. The effect is that both the enter and do-parts
are evaluated (it prints @value: 'hello'@).

Declaring a dynamic reference can have its advantages, because using
references doesn't cause the objects to be evaluated. It can
potentially ligthen the workload to use references instead of static
objects. It also gives the opportunity to have the same name refer to
several different objects (examples where this is useful will follow
in the next sections).

Try, for example, to add the following to the above program:

bc(block). {
  sObj: @TalkingString;      // in the Attributes part
  ...
#
  new TalkingString|sObj;    // in the do-part
  ...
}

You will hopefully find that the text @value: \n@ is printed twice. So
what gives? When the TalkingString object instance is created it is
immediately executed (if we don't ask for a reference with @^@), and
when it is assigned to @sObj@, @sObj@ is _also_ evaluated, and as we
have not assigned any string value to str in TalkingString, str is the
empty string, which yields just the @value: \n@ part.

By now it would probably be best to go to the
"next":{% gbeta_tutorial next %} section.
