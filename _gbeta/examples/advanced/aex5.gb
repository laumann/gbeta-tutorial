-- universe:descriptor --
// FILE aex5.gb
//
// This shows how specialization of nested
// patterns ('role1' and 'role2') can be used
// to "fill in the roles" with "actors" defined
// in an ensemble with a given basic structure.
// In this case we use the 'twoActors' setup
// which simply states that there are two actors,
// but there could be other constraints, e.g. a
// basic scheme of actions taking place, implemented
// as hooks (virtuals) which must then be filled in.
//
// The 'twoActors' setup is then specialized to an
// "implementation aspect," 'anEnsemble', and
// independently to an "activity aspect," the
// 'hamlet' play.  Finally the two aspects are
// combined in the do-part, and executed
{   
  actor: %{
    realname:< string;
    name:< string;
    limps:< bool;
    deaf:< bool;
    speak: { '\n'+name+' ('+realname+')'+': '|stdio };
    answer: speak {
      if deaf do { 'Er..?'|stdio } else { 'Yes, quite so.'|stdio };
      if limps do { '   .. Ouch, my leg!!'|stdio }
    }
  };

  twoActors: %{
    role1:< actor;
    role2:< actor;
    r1: @role1; r2: @role2
  };

  anEnsemble: twoActors {
    role1:: { realname:: { 'Laurence Olivier'|value };
              deaf:: { true|value }};
    role2:: { realname:: { 'Madonna'|value };
              limps:: { true|value }}
  };
  hamlet: twoActors {
    role1:: actor{ name:: { 'Hamlet'|value }};
    role2:: actor{ name:: { 'Ophelia'|value }}
  #
    r1.speak{ 'Oh, I love You, '+r2.name+'!'|stdio } 
    | r2.answer;
    r2.speak{ r1.name+', are you still seeing that Leigh woman?'|stdio }
    | r1.answer
  }
#
  anEnsemble & hamlet;
  '\n'|stdio
}
