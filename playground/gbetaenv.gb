-- universe:descriptor --
{
  <<SLOT lib:declarations>>;

  // eval-semantics version of object
  method: #.@.@object;

  // rudimentary IO
  newline: { '\n'|stdio };
  puttext: %(stdio);
  putline: puttext{ '\n'|stdio };
  putint: %((int2str|stdio));
  putfloat: %((float2str|stdio));

  int2str: %(n:int|result:string){ 
    i:int; 
    neg:bool; 
    w: [12]@char 
  #
    if n<0 do { true|neg; -n|n } else { false|neg };
    while n<>0 do { (i,n mod 10)|w.setval; i+1|i; n div 10 | n };
    if i=0 do { '0'|result } else {{ 
      wres: [i]@char 
    #
      for j:i do { (j,(i-j-1|w.getval)+'0')|wres.setval };
      wres|arr2str|result;
    }};
    if neg do { '-'+result|result }
  };

  str2int: %(s:string|i:int){ 
    inx:int 
  #
    0|inx|i; 
    while inx<(s^).size do {
      10*i+((inx|(s^).get)-'0')|i; 
      inx+1|inx
    }
  };

  float2str: %(r:float|result:string){ 
    i:int 
  #
    if r<0 do { '-'|result; -r|r } else { ''|result };
    result+(r|i|int2str)|result; r-i|r;
    if r>0 do {
      result+'.'|result;
      while (r>0) and ((result^).size<15) do {
        10*r|r|i; r-i|r; result+(i|int2str)|result
      }
    }
  };

  // a couple of abstractions
  cycle: { INNER; restart cycle };
  autoinit: %{ init: #.@object; __runInit:[%(|0){init}]@bool };
  TA: %(|this){ T:< object }; // type argument

  // Rudimentary support for casting
  cast: %(arg:object|val:T){ T:< object #
    case argT:arg do { ?T: argT|val } else { 'Failed cast!'|putline; 1/0 }
  };

  // various stuff
  expect: %(s:string){ 'Expect: '+s+'\nActual: '|stdio };
  max: %(i:int,j:int | if i>j then i else j);
  min: %(i:int,j:int | if i<j then i else j);

  theProgram: @<<SLOT program:merge>>
#
  theProgram
}

