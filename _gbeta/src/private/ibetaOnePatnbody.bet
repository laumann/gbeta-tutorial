(* FILE "./private/ibetaOnePatnbody.bet"
 *
 * Copyright (C) 1997-2011 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.au.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aarhus
 *    DK-8200 Aarhus N
 *    Denmark
 *)

ORIGIN 'ibetaOnebody';
INCLUDE '../ibetaIter'

(************************************************************
 *                                                          *
 *                       l1IndexEntity                      *
 *                                                          *
 ************************************************************)

-- IndexEntityPrint:dopart --
do
   (* like int, but enclosed in <> to signal "indexness" *)
   ' = <'->output; value->dest.putint; '>'->output

-- IndexEntityPrintShort:dopart --
do
   '=<'->output; value->dest.putint; '>'->output

(************************************************************
 *                                                          *
 *                    l1ConstraintEntity                    *
 *                                                          *
 ************************************************************)

-- ConstraintEntityPrint:dopart --
do
   ' ='->output;
   (dest[],indentation+indent_delta,true)->l2ndcl.print;
   ' '->output;
   op->CstOp2Txt->output;
   ' '->output;
   (dest[],indentation+indent_delta,false,NONE)->l1pat.print

-- ConstraintEntityPrintShort:dopart --
do
   (dest[],indentation,false)->l2ndcl.print;
   op->CstOp2Txt->output;
   (dest[],indentation,false,NONE)->l1pat.printShort

-- ObjCstrEntityPrint:dopart --
do
   ' ='->output;
   (dest[],indentation+indent_delta,true)->l2ndcl.print;
   ' = '->output;
   (dest[],indentation+indent_delta,false,NONE)->l1obj.print

-- ObjCstrEntityPrintShort:dopart --
do
   (dest[],indentation,false,l2ndcl.value[])->l1obj.printShort

-- ConstraintEntityListAdd:dopart --
do
   (l2ndcl[],op,l1pat[])->(&l1ConstraintEntity[]).init->append

-- ObjCstrEntityListAdd:dopart --
do
   (l2ndcl[],l1obj[])->(&l1ObjCstrEntity[]).init->append

-- EntityListPrint:dopart --
do
   scan
   (# not_first: @boolean
   do (if not_first then
          INNER print; (* used for insertion of separator *)
          (dest[],indentation,element_nl,NONE)->current.print
       else
          true->not_first;
          (dest[],indentation,false,NONE)->current.print
      if)
   #)

(************************************************************
 *                                                          *
 *                    l1PatternRefEntity                    *
 *                                                          *
 ************************************************************)

-- PatternRefEntityPrint:dopart --
do
   (if value[]=NONE then
       ' = null'->output
    else
       ' --> '->output;
       (dest[],indentation,false,NONE)->value.print
   if)

-- PatternRefEntityPrintShort:dopart --
do
   (if value[]=NONE then
       '=null'->output
    else
       '-->'->output;
       (dest[],indentation,false,NONE)->value.printShort
   if)
   
   (* eclipseSocket: print LL *)
-- PatternRefEntityPrintLL:dopart --
do
   incIndent;
   '(l1PatternRefEntity\n'->output;
   (if value[]<>NONE then
       (dest[],indentation+indent_delta,false,NONE)->value.printLL
   if);
   ')'->output;
   decIndent
   
-- PatternRefEntityPrintShortLL:dopart --
do
   incIndent;
   '(l1PatternRefEntityShort\n'->output;
   (if value[]<>NONE then
       (dest[],indentation+indent_delta,false,NONE)->value.printShortLL
   if);
   ')'->output;
   decIndent
   
      
   
(*
 * local variables:
 * ee-beta-main-file: "/src/main/gbeta.bet"
 * end:
 *)
