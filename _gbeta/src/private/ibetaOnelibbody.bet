(* FILE "./private/ibetaOnelibbody.bet"
 *
 * Copyright (C) 1997-2011 Erik Ernst
 *
 * This file is part of "gbeta" -- a generalized version of the
 * programming language BETA.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is destributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * Among other things, the copyright notice and this notice must be
 * preserved on all copies.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program, probably in a file named COPYING; if not,
 * write to the Free Software Foundation, Inc., 675 Mass Ave,
 * Cambridge, MA 02139, USA.
 *
 * To contact the author by email: eernst@cs.au.dk
 *
 * To contact the author by snail-mail:
 *    Erik Ernst
 *    Department of Computer Science
 *    University of Aarhus
 *    DK-8200 Aarhus N
 *    Denmark
 *)

ORIGIN 'ibetaOnelib';
INCLUDE '../ibetaSType';
INCLUDE '../ibetaIter';
INCLUDE 'ibetaCommonlib';
INCLUDE 'ibetaTransientlib'

-- PatToTyp:dopart --
do
   l1pat[]->(&l1TypeEntity[]).init->l1typ[]

-- ObjectRefEntityConforms:dopart --
do
   (if l1obj[]<>NONE then
       (if exact then
           l1obj.private.pattern[]->qual.equal->value
        else
           l1obj[]->qual.conforms->value
       if)
    else
       true->value
   if)

-- PatternRefEntityConforms:dopart --
do
   (if l1pat[]<>NONE then
       (if exact then
           l1pat[]->qual.equal->value
        else
           (if not qual.hasConstraints then
               l1pat[]->qual.private.l1pat.lessEqual->value
            else
               (* we inherently cannot check for constraint
                * conformance dynamically, because this is
                * concerned with the values of patterns that
                * do not exist in a pattern, only in an instance
                * thereof, and they are not guaranteed to have
                * the same values in different instances of the
                * same pattern; so the code generation is buggy
                * if we ever arrive here *)
               'Request for impossible dynamic conformance test'
                 ->internalError
           if)
       if)
    else
       true->value
   if)

-- IndexEntityStep:dopart --
do
   (* this should be the only direct write operation to
    * 'value' in the entire interpreter! *)
   value+1->value

(*
 * local variables:
 * ee-beta-main-file: "/src/main/gbeta.bet"
 * end:
 *)
