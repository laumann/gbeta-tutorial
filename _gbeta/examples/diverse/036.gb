-- universe:descriptor --
// Note that this program is not type safe; the problem is that it 
// is not known at the statement 'this(symmetricCoroutine)[]->next[]'
// that 'this(symmetricCoroutine)' is actually a 'component'.  It 
// must be a component, because 'next' is declared with '^|'.  Also
// note that this is a problem that cannot be solved in BETA, but in 
// gbeta where 'component' is a pattern we may specify the pattern
// 'symmetricCoroutine' such that it is guaranteed to be a component.
// Take a look at 036x.gb to see how to do this. 
{ 
  cycle: { INNER; restart };

  getch: %(|(0|s.get)){ s: string #
    stdio|s; if s.size=0 do { SUSPEND } // kill
  };

  symmetricCoroutineSystem: %{
    symmetricCoroutine: component %{
      resume:< { this(symmetricCoroutine)|next; SUSPEND }
    };
    next: ^symmetricCoroutine;
    run: cycle %(next){ 
      active: ^symmetricCoroutine // currently running
    #
      if (next|active)=null do { leave run };
      null|next;
      active@; // attach next component 
      // active 'SUSPEND'ed, 'Resumed', or terminated 
    }
  };

  converter: @symmetricCoroutineSystem %{
    doubleA2B: @symmetricCoroutine{ ch: char #
      cycle { 
        getch|ch;
        if ch='a' do { 
          getch|ch;
          if ch='a' do { 'b'|doubleB2C.resume } else {
            'a'|doubleB2C.resume;
            ch|doubleB2C.resume
          }
        }
        else { ch|doubleB2C.resume }
      }
    };
    doubleB2C: @symmetricCoroutine %{
      ch: char;
      resume:: %(ch)
    #
      cycle{
        case ch do {
          ?'b': doubleA2B.resume;
                if ch='b' do { 'c'|stdio } else {
                  'b'|stdio; ch|stdio
                }
          ?'\n': SUSPEND
        }
        else {
          ch|stdio
        };
        doubleA2B.resume
      }
    }
  #
    doubleA2B^|run
  }
#
  'Enter one character + [ENTER] at a time; empty input quits;\n'|stdio;
  'on the fly, "aa" becomes "b" and "bb" becomes "c".\n\n'|stdio;
  converter
}
